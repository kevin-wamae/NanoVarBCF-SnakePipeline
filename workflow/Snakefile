# #####################################################################
#   A Snakemake pipeline for variant calling from Oxford Nanopore data
# #####################################################################

# TODO: add profiles {conda, singularity, cluster}
# TODO: include all regions in the vcf files
# TODO: include all regions in the vcf files

# ######################################################################
#                              Dependencies
# ######################################################################
# configuration file
configfile: "config/config.yaml"


# generate a list of sample names
(SAMPLES,) = glob_wildcards(config["input"]["fastq"] + "{sample}.fastq.gz")

# ######################################################################
#               Step 1 - Prepare a list of all output files
# ######################################################################


# 1) generate a list of all output files
# *********************************************************************
rule all:
    input:
        # -----------------------------------
        # gather genome data
        config["genome_data"]["dir"] + config["genome_data"]["fasta"],
        config["genome_data"]["dir"] + config["genome_data"]["gff"],
        # -----------------------------------
        # nanoplot quality check
        expand(config["qc"]["nanoplot"].format(dir=config['dir']) + "{sample}", sample=SAMPLES),
        # -----------------------------------
        # samtools index
        config["samtools"]["index"],
        # -----------------------------------
        # porechop
        expand(config["porechop"]["dir"].format(dir=config['dir']) + "{sample}.fastq.gz", sample=SAMPLES),
        # -----------------------------------
        # minimap2
        config["minimap2"]["index"],
        expand(config["minimap2"]["dir"].format(dir=config['dir']) + "{sample}.bam", sample=SAMPLES),
        # -----------------------------------
        # bedtools genomecov
        expand(config["bedtools"]["dir"].format(dir=config['dir']) + "{sample}.bedGraph", sample=SAMPLES),
        # -----------------------------------
        # medaka
        ## consensus
        expand(config["medaka"]["consensus"]["dir"].format(dir=config['dir']) + "{sample}.hdf", sample=SAMPLES),
        ## variant
        expand(config["medaka"]["variant"]["dir"].format(dir=config['dir']) + "{sample}.vcf", sample=SAMPLES),
        expand(config["medaka"]["variant"]["dir"].format(dir=config['dir']) + "{sample}-annotated.vcf", sample=SAMPLES),
        ## haploid variant
        expand(config["medaka"]["haploid"]["dir"].format(dir=config['dir']) + "{sample}", sample=SAMPLES),
        expand(config["medaka"]["haploid"]["dir"].format(dir=config['dir']) + "{sample}/medaka.annotated.vcf", sample=SAMPLES),
        # -----------------------------------
        # freebayes
        expand(config["freebayes"]["dir"].format(dir=config['dir']) + "{sample}.vcf", sample=SAMPLES),
        # -----------------------------------
        # clair3
        # download model
        config["clair3"]["dir_model"] + config["clair3"]["tar_ext"],
        config["clair3"]["dir_model"] + config["clair3"]["tar"],
        # variant calling
        expand(config["clair3"]["dir_variants"].format(dir=config['dir']) + "{sample}", sample=SAMPLES),
        expand(config["clair3"]["dir_variants"].format(dir=config['dir']) + "{sample}/merge_output.vcf.gz", sample=SAMPLES),
        # -----------------------------------
        # snpeff_annotate_variants
        expand(config["snpeff"]["dir"]["vcf_annot"].format(dir=config['dir']) + "{sample}-medaka-variant.vcf", sample=SAMPLES),
        expand(config["snpeff"]["dir"]["vcf_annot"].format(dir=config['dir']) + "{sample}-medaka-haploid-variant.vcf", sample=SAMPLES),
        expand(config["snpeff"]["dir"]["vcf_annot"].format(dir=config['dir']) + "{sample}-freebayes-variant.vcf", sample=SAMPLES),
        expand(config["snpeff"]["dir"]["vcf_annot"].format(dir=config['dir']) + "{sample}-clair3-variant.vcf", sample=SAMPLES),
        # -----------------------------------
        # snpsift_varType
        expand(config["snpeff"]["dir"]["vcf_vartype"].format(dir=config['dir']) + "{sample}-medaka-variant-snpsift.vcf", sample=SAMPLES),
        expand(config["snpeff"]["dir"]["vcf_vartype"].format(dir=config['dir']) + "{sample}-medaka-haploid-variant-snpsift.vcf", sample=SAMPLES),
        expand(config["snpeff"]["dir"]["vcf_vartype"].format(dir=config['dir']) + "{sample}-freebayes-variant-snpsift.vcf", sample=SAMPLES),
        expand(config["snpeff"]["dir"]["vcf_vartype"].format(dir=config['dir']) + "{sample}-clair3-variant-snpsift.vcf", sample=SAMPLES),
        # -----------------------------------
        # modify_vcf
        expand(config["snpeff"]["dir"]["vcf_vartype"].format(dir=config['dir']) + "{sample}-medaka-variant-snpsift-modified.vcf", sample=SAMPLES),
        expand(config["snpeff"]["dir"]["vcf_vartype"].format(dir=config['dir']) + "{sample}-medaka-haploid-variant-snpsift-modified.vcf", sample=SAMPLES),
        # -----------------------------------
        # gatk_variants_to_table
        expand(config["gatk"]["dir"].format(dir=config['dir']) + "medaka_variant/{sample}-medaka_variant.tsv", sample=SAMPLES),
        expand(config["gatk"]["dir"].format(dir=config['dir']) + "medaka_haploid_variant/{sample}-medaka_haploid_variant.tsv", sample=SAMPLES),
        expand(config["gatk"]["dir"].format(dir=config['dir']) + "freebayes/{sample}-freebayes.tsv", sample=SAMPLES),
        expand(config["gatk"]["dir"].format(dir=config['dir']) + "clair3/{sample}-clair3.tsv", sample=SAMPLES),


# ######################################################################
#                      Step 2 - Gather Genome Data
# ######################################################################


# 2) gather genome data - copy genome data from snpeff database to the the input directory
# *********************************************************************
rule gather_genome_data:
    input:
        genome=config["input"]["genome"]["fasta"],
        gff=config["input"]["genome"]["gff"],
    output:
        genome=config["genome_data"]["dir"] + config["genome_data"]["fasta"],
        gff=config["genome_data"]["dir"] + config["genome_data"]["gff"],
    shell:
        """
        echo "##############################################"
        echo "---------   Gathering Genome Data   ----------"
        echo "##############################################"

        rsync --update {input.genome} {output.genome}
        rsync --update {input.gff} {output.gff}
        """


# ######################################################################
#                      Step 3 - Quality Control
# ######################################################################


# 3) nanoplot - quality check of raw reads
# *********************************************************************
rule nanoplot_qc:
    input:
        fastq=config["input"]["fastq"] + "{sample}.fastq.gz",
    output:
        qc_dir=directory(config["qc"]["nanoplot"].format(dir=config['dir']) + "{sample}"),
    singularity:
        "https://depot.galaxyproject.org/singularity/nanoplot:1.42.0--pyhdfd78af_0"
    threads:
        config["threads"]
    shell:
        """
        echo "##############################################"
        echo "---------   Running NanoPlot QC   ------------"
        echo "##############################################"

        NanoPlot \
            --threads {threads} \
            --fastq {input.fastq} \
            --outdir {output.qc_dir} \
            --tsv_stats \
            --only-report
        """


# ######################################################################
#                      Step 4 - Map Reads to Genome
# ######################################################################


# 4a) samtools index - index genome fasta file
# *********************************************************************
rule samtools_index:
    input:
        genome=rules.gather_genome_data.output.genome,
    output:
        index=config["samtools"]["index"],
    singularity:
        "https://depot.galaxyproject.org/singularity/samtools:1.18--h50ea8bc_1"
    shell:
        """
        echo "##############################################"
        echo "---------   Running Samtools Index   ---------"
        echo "##############################################"

        samtools faidx {input.genome}
        """


# 4b) porechop - trim adapters
# *********************************************************************
rule porechop_trim:
    input:
        fastq=config["input"]["fastq"] + "{sample}.fastq.gz",
    output:
        fastq=config["porechop"]["dir"].format(dir=config['dir']) + "{sample}.fastq.gz",
    log:
        config["porechop"]["dir"].format(dir=config['dir']) + "{sample}.log"
    params:
        checkreads=config["porechop"]["checkreads"],
    threads:
        config["threads"]
    singularity:
        "https://depot.galaxyproject.org/singularity/porechop:0.2.4--py39hc16433a_4"
    shell:
        """
        echo "##############################################"
        echo "---------   Running Porechop Trim   ---------"
        echo "##############################################"

        porechop \
            --threads {threads} \
            --check_reads {params.checkreads} \
            --input {input.fastq} \
            --output {output.fastq} &> {log}
        """


# 4c) minimap2 index - index genome fasta file
# *********************************************************************
rule minimap2_index:
    input:
        genome=rules.gather_genome_data.output.genome,
    output:
        index=config["minimap2"]["index"],
    params:
        extra=config["minimap2"]["extra"]["index"]
    singularity:
        "https://depot.galaxyproject.org/singularity/minimap2:2.26--he4a0461_2"
    threads:
        config["threads"]
    shell:
        """
        echo "##############################################"
        echo "---------   Running Minimap2 Index   ---------"
        echo "##############################################"

        minimap2 {params.extra} \
            -t {threads} \
            -d {output.index} {input.genome}
        """


# 4d) minimap2 align - index genome fasta file
# *********************************************************************
rule minimap2_align:
    input:
        index=rules.minimap2_index.output.index,
        fastq=rules.porechop_trim.output.fastq,
        fai=rules.samtools_index.output.index,
        ref=rules.gather_genome_data.output.genome,
    output:
        bam=config["minimap2"]["dir"].format(dir=config['dir']) + "{sample}.bam",
    log:
        minimap2=config["minimap2"]["dir"].format(dir=config['dir']) + "{sample}-minimap2.log"
    params:
        extra_align=config["minimap2"]["extra"]["align"],
        extra_view=config["samtools"]["view"],
        read_group=r"-r '@RG\tID:{sample}\tSM:{sample}'",
    conda:
        "envs/minimap2.yaml"
    threads:
        config["threads"]
    shell:
        """
        echo "##############################################"
        echo "---------   Running Minimap2 Align   ---------"
        echo "##############################################"

        minimap2 \
            {params.extra_align} \
            -t {threads} \
            {input.index} {input.fastq} 2> {log.minimap2} |\
        samtools view \
            --threads {threads} \
            {params.extra_view} \
            --fai-reference {input.fai} |\
        samtools addreplacerg \
            {params.read_group} \
            --threads {threads} /dev/stdin |\
        samtools sort \
            --threads {threads} \
            --reference {input.ref} \
            -o {output.bam}

        samtools index {output.bam}
        """


# 4e) bedtools genomecov - calculate genome coverage
# *********************************************************************
rule bedtools_genomecov:
    input:
        bam=rules.minimap2_align.output.bam,
    output:
        bedGraph=config["bedtools"]["dir"].format(dir=config['dir']) + "{sample}.bedGraph",
    singularity:
        "https://depot.galaxyproject.org/singularity/bedtools:2.31.0--hf5e1c6e_3"
    shell:
        """
        echo "##############################################"
        echo "------   Running Bedtools Genomecov   --------"
        echo "##############################################"

        bedtools genomecov -split -ibam {input.bam} -bga |\
        bedtools sort > {output.bedGraph}
        """


######################################################################
#         Step 5 - Variant Calling (Medaka, Freebayes, Clair3)
######################################################################

# 5a i) medaka - consensus calling
# *********************************************************************
rule medaka_consensus:
    input:
        bam=rules.minimap2_align.output.bam,
    output:
        hdf=config["medaka"]["consensus"]["dir"].format(dir=config['dir']) + "{sample}.hdf",
    log:
        config["medaka"]["consensus"]["dir"].format(dir=config['dir']) + "{sample}.log"
    singularity:
        "https://depot.galaxyproject.org/singularity/medaka:1.11.1--py310h87e71ce_0"
    threads:
        config["threads"]
    shell:
        """
        echo "##############################################"
        echo "------   Running Medaka Consensus   ----------"
        echo "##############################################"

        medaka consensus \
            --threads {threads} \
            --model r1041_e82_400bps_sup_v4.2.0 \
            {input.bam} \
            {output.hdf} &> {log}
        """


# 5a ii) medaka - variant calling
# *********************************************************************
rule medaka_variant:
    input:
        genome=rules.gather_genome_data.output.genome,
        hdf=rules.medaka_consensus.output.hdf,
        bam=rules.minimap2_align.output.bam,
        regions=config["input"]["genome"]["bed"]
    output:
        vcf=config["medaka"]["variant"]["dir"].format(dir=config['dir']) + "{sample}.vcf",
        vcf_annotated=config["medaka"]["variant"]["dir"].format(dir=config['dir']) + "{sample}-annotated.vcf",
    log:
        variant=config["medaka"]["variant"]["dir"].format(dir=config['dir']) + "{sample}-variant.log",
        annotate=config["medaka"]["variant"]["dir"].format(dir=config['dir']) + "{sample}-annotate.log"
    singularity:
        "https://depot.galaxyproject.org/singularity/medaka:1.11.1--py310h87e71ce_0"
    shell:
        """
        echo "##############################################"
        echo "-----   Running Medaka Variant Calling   -----"
        echo "##############################################"

        medaka variant \
            {input.genome} \
            {input.hdf} \
            {output.vcf} &> {log.variant}

        medaka tools annotate \
            --dpsp \
            {output.vcf} \
            {input.genome} \
            {input.bam} \
            {output.vcf_annotated} &> {log.annotate}
        """


# 5b) medaka - haploid variant calling
# *********************************************************************
rule medaka_haploid_variant:
    input:
        genome=rules.gather_genome_data.output.genome,
        fastq=config["input"]["fastq"] + "{sample}.fastq.gz",
    output:
        vcf_dir=directory(config["medaka"]["haploid"]["dir"].format(dir=config['dir']) + "{sample}"),
        vcf=config["medaka"]["haploid"]["dir"].format(dir=config['dir']) + "{sample}/medaka.annotated.vcf",
    log:
        config["medaka"]["haploid"]["dir"].format(dir=config['dir']) + "{sample}-haploid-variant.log"
    singularity:
        "https://depot.galaxyproject.org/singularity/medaka:1.11.1--py310h87e71ce_0"
    threads:
        config["threads"]
    shell:
        """
        echo "##############################################"
        echo "--  Running Medaka Haploid Variant Calling  --"
        echo "##############################################"

        medaka_haploid_variant \
            -s \
            -t {threads} \
            -m r1041_e82_400bps_sup_variant_v4.2.0 \
            -r {input.genome} \
            -i {input.fastq} \
            -o {output.vcf_dir} &> {log}
        """


# 5c) freebayes - variant calling
# *********************************************************************
rule freebayes:
    input:
        genome=rules.gather_genome_data.output.genome,
        bam=rules.minimap2_align.output.bam,
        regions=config["input"]["genome"]["bed"]
    output:
        vcf=config["freebayes"]["dir"].format(dir=config['dir']) + "{sample}.vcf",
    log:
        config["freebayes"]["dir"].format(dir=config['dir']) + "{sample}-freebayes.log"
    params:
        extra=config["freebayes"]["extra"]
    singularity:
        "https://depot.galaxyproject.org/singularity/freebayes:1.3.7--h1870644_0"
    shell:
        """
        echo "##############################################"
        echo "---   Running FreeBayes Variant Calling   ----"
        echo "##############################################"

        freebayes \
            {params.extra} \
            --targets {input.regions} \
            -f {input.genome} {input.bam} > {output.vcf} 2> {log}
        """


# 5d) download clair3 model
# *********************************************************************
rule download_clair3_model:
    output:
        dir=directory(config["clair3"]["dir_model"] + config["clair3"]["tar_ext"]),
        tar=config["clair3"]["dir_model"] + config["clair3"]["tar"],
    log:
        wget=config["clair3"]["dir_model"] + "wget.log",
        tar=config["clair3"]["dir_model"] + "tar.log"
    params:
        tar=config["clair3"]["model_url"].format(dir=config['dir']) + config["clair3"]["tar"],
    shell:
        """
        mkdir -p {output.dir}

        wget -O {output.tar} {params.tar} &> {log.wget}

        tar -xzvf {output.tar} -C {output.dir} --strip-components 1 &> {log.tar}
        """


# 5e) clair3 - variant calling
# *********************************************************************
rule clair3:
    input:
        genome=rules.gather_genome_data.output.genome,
        bam=rules.minimap2_align.output.bam,
        model=rules.download_clair3_model.output.dir,
    output:
        vcf_dir=directory(config["clair3"]["dir_variants"].format(dir=config['dir']) + "{sample}"),
        vcf=config["clair3"]["dir_variants"].format(dir=config['dir']) + "{sample}/merge_output.vcf.gz",
    log:
        config["clair3"]["dir_variants"].format(dir=config['dir']) + "{sample}/clair3.log"
    singularity:
        "https://depot.galaxyproject.org/singularity/clair3:1.0.4--py39hf5e1c6e_3"
    params:
        model=config["clair3"]["dir_model"] + "r941_prom_sup_g5014/",
    threads:
        config["threads"]
    shell:
        """
        echo "##############################################"
        echo "----   Running Clair3 Variant Calling   ------"
        echo "##############################################"

        run_clair3.sh \
            --model_path {input.model} \
            --include_all_ctgs \
            --no_phasing_for_fa \
            --ref_fn={input.genome} \
            --bam_fn={input.bam} \
            --threads={threads} \
            --platform="ont" \
            --output={output.vcf_dir} &> {log}
        """


# ######################################################################
#                 Step 6 - Variant Filtering and Annotation
# ######################################################################


# 6a) snpeff - annotate variants
# *********************************************************************
rule snpeff_annotate_variants:
    input:
        vcf_medaka_variant=rules.medaka_variant.output.vcf_annotated,
        vcf_medaka_haploid_variant=rules.medaka_haploid_variant.output.vcf_dir + "/medaka.annotated.vcf",
        vcf_freebayes=rules.freebayes.output.vcf,
        vcf_clair3=rules.clair3.output.vcf_dir + "/merge_output.vcf.gz",
    output:
        vcf_medaka_variant=config["snpeff"]["dir"]["vcf_annot"].format(dir=config['dir']) + "{sample}-medaka-variant.vcf",
        vcf_medaka_haploid_variant=config["snpeff"]["dir"]["vcf_annot"].format(dir=config['dir']) + "{sample}-medaka-haploid-variant.vcf",
        vcf_freebayes=config["snpeff"]["dir"]["vcf_annot"].format(dir=config['dir']) + "{sample}-freebayes-variant.vcf",
        vcf_clair3=config["snpeff"]["dir"]["vcf_annot"].format(dir=config['dir']) + "{sample}-clair3-variant.vcf",
    params:
        config=config["snpeff"]["config"],
        database=config["snpeff"]["database"],
        extra=config["snpeff"]["extra"],
    singularity:
        "https://depot.galaxyproject.org/singularity/snpeff:5.2--hdfd78af_0"
    shell:
        """
        echo "##############################################"
        echo "--------   Running SnpEff Annotate   --------"
        echo "##############################################"

        snpEff ann \
            {params.extra} \
            -config {params.config} \
            {params.database} \
            {input.vcf_medaka_variant} > {output.vcf_medaka_variant}

        snpEff ann \
            {params.extra} \
            -config {params.config} \
            {params.database} \
            {input.vcf_medaka_haploid_variant} > {output.vcf_medaka_haploid_variant}

        snpEff ann \
            {params.extra} \
            -config {params.config} \
            {params.database} \
            {input.vcf_freebayes} > {output.vcf_freebayes}

        snpEff ann \
            {params.extra} \
            -config {params.config} \
            {params.database} \
            {input.vcf_clair3} > {output.vcf_clair3}
        """


# 6b) snpsift VarType - annotate variants
# *********************************************************************
rule snpsift_varType:
    input:
        vcf_medaka_variant=rules.snpeff_annotate_variants.output.vcf_medaka_variant,
        vcf_medaka_haploid_variant=rules.snpeff_annotate_variants.output.vcf_medaka_haploid_variant,
        vcf_freebayes=rules.snpeff_annotate_variants.output.vcf_freebayes,
        vcf_clair3=rules.snpeff_annotate_variants.output.vcf_clair3,
    output:
        vcf_medaka_variant=config["snpeff"]["dir"]["vcf_vartype"].format(dir=config['dir']) + "{sample}-medaka-variant-snpsift.vcf",
        vcf_medaka_haploid_variant=config["snpeff"]["dir"]["vcf_vartype"].format(dir=config['dir']) + "{sample}-medaka-haploid-variant-snpsift.vcf",
        vcf_freebayes=config["snpeff"]["dir"]["vcf_vartype"].format(dir=config['dir']) + "{sample}-freebayes-variant-snpsift.vcf",
        vcf_clair3=config["snpeff"]["dir"]["vcf_vartype"].format(dir=config['dir']) + "{sample}-clair3-variant-snpsift.vcf",
    singularity:
        "https://depot.galaxyproject.org/singularity/snpsift:5.2--hdfd78af_0"
    shell:
        """
        echo "##############################################"
        echo "--------   Running SnpSift VarType   --------"
        echo "##############################################"

        SnpSift varType {input.vcf_medaka_variant} > {output.vcf_medaka_variant}
        SnpSift varType {input.vcf_medaka_haploid_variant} > {output.vcf_medaka_haploid_variant}
        SnpSift varType {input.vcf_freebayes} > {output.vcf_freebayes}
        SnpSift varType {input.vcf_clair3} > {output.vcf_clair3}
        """


# 6c) modify vcf - add FORMAT/DP and FORMAT/AD to medaka vcf files
# *********************************************************************
rule modify_vcf:
    input:
        vcf_medaka_variant=rules.snpsift_varType.output.vcf_medaka_variant,
        vcf_medaka_haploid_variant=rules.snpsift_varType.output.vcf_medaka_haploid_variant,
    output:
        vcf_medaka_variant=config["snpeff"]["dir"]["vcf_vartype"].format(dir=config['dir']) + "{sample}-medaka-variant-snpsift-modified.vcf",
        vcf_medaka_haploid_variant=config["snpeff"]["dir"]["vcf_vartype"].format(dir=config['dir']) + "{sample}-medaka-haploid-variant-snpsift-modified.vcf",
    shell:
        """
        python workflow/scripts/modify_vcf.py {input.vcf_medaka_variant} {output.vcf_medaka_variant}

        python workflow/scripts/modify_vcf.py {input.vcf_medaka_haploid_variant} {output.vcf_medaka_haploid_variant}
        """


# 6d) gatk variantsToTable - extract variant information to a table
# *********************************************************************
rule gatk_variants_to_table:
    input:
        vcf_medaka_variant=rules.modify_vcf.output.vcf_medaka_variant,
        vcf_medaka_haploid_variant=rules.modify_vcf.output.vcf_medaka_haploid_variant,
        vcf_freebayes=rules.snpsift_varType.output.vcf_freebayes,
        vcf_clair3=rules.snpsift_varType.output.vcf_clair3,
    output:
        tsv_medaka_variant=config["gatk"]["dir"].format(dir=config['dir']) + "medaka_variant/{sample}-medaka_variant.tsv",
        tsv_medaka_haploid_variant=config["gatk"]["dir"].format(dir=config['dir']) + "medaka_haploid_variant/{sample}-medaka_haploid_variant.tsv",
        tsv_freebayes=config["gatk"]["dir"].format(dir=config['dir']) + "freebayes/{sample}-freebayes.tsv",
        tsv_clair3=config["gatk"]["dir"].format(dir=config['dir']) + "clair3/{sample}-clair3.tsv",
    params:
        java_opts=config["gatk"]["java_opts"],
    singularity:
        "https://depot.galaxyproject.org/singularity/gatk4:4.4.0.0--py36hdfd78af_0"
    shell:
        """
        echo "##############################################"
        echo "------   Running GATK VariantsToTable   ------"
        echo "##############################################"

        gatk --java-options "{params.java_opts}" VariantsToTable \
            -V {input.vcf_medaka_variant} \
            --fields CHROM \
            --fields POS \
            --fields REF \
            --fields ALT \
            --fields TYPE \
            --fields ANN \
            --genotype-fields GT \
            --genotype-fields AD \
            --genotype-fields DP \
            --genotype-fields GQ \
            --genotype-fields PGT \
            --genotype-fields PID \
            --genotype-fields PL \
            --genotype-fields PS \
            -O /dev/stdout 2> {output.tsv_medaka_variant}.log |\
        bash workflow/scripts/split_annot_column.sh > {output.tsv_medaka_variant}

        gatk --java-options "{params.java_opts}" VariantsToTable \
            -V {input.vcf_medaka_haploid_variant} \
            --fields CHROM \
            --fields POS \
            --fields REF \
            --fields ALT \
            --fields TYPE \
            --fields ANN \
            --genotype-fields GT \
            --genotype-fields AD \
            --genotype-fields DP \
            --genotype-fields GQ \
            --genotype-fields PGT \
            --genotype-fields PID \
            --genotype-fields PL \
            --genotype-fields PS \
            -O /dev/stdout 2> {output.tsv_medaka_haploid_variant}.log |\
        bash workflow/scripts/split_annot_column.sh > {output.tsv_medaka_haploid_variant}

        gatk --java-options "{params.java_opts}" VariantsToTable \
            -V {input.vcf_freebayes} \
            --fields CHROM \
            --fields POS \
            --fields REF \
            --fields ALT \
            --fields TYPE \
            --fields ANN \
            --genotype-fields GT \
            --genotype-fields AD \
            --genotype-fields DP \
            --genotype-fields GQ \
            --genotype-fields PGT \
            --genotype-fields PID \
            --genotype-fields PL \
            --genotype-fields PS \
            -O /dev/stdout 2> {output.tsv_freebayes}.log |\
        bash workflow/scripts/split_annot_column.sh > {output.tsv_freebayes}

        gatk --java-options "{params.java_opts}" VariantsToTable \
            -V {input.vcf_clair3} \
            --fields CHROM \
            --fields POS \
            --fields REF \
            --fields ALT \
            --fields TYPE \
            --fields ANN \
            --genotype-fields GT \
            --genotype-fields AD \
            --genotype-fields DP \
            --genotype-fields GQ \
            --genotype-fields PGT \
            --genotype-fields PID \
            --genotype-fields PL \
            --genotype-fields PS \
            -O /dev/stdout 2> {output.tsv_clair3}.log |\
        bash workflow/scripts/split_annot_column.sh > {output.tsv_clair3}
        """